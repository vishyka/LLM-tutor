# Benchmark for evaluator for Tutor Agent Responses

# Test 1: Given essentially the answer, we should return answer provided.
- prompt: "To solve the problem, start by determining the smallest and largest values in the array. 
Then, go through the array to check each number. If a number is neither the smallest nor the largest, 
return it. If no such number exists after checking all the elements, return -1."
  evaluation: "answer provided"

# Test 2: Given guiding hints, we should return hints only. 
- prompt: "Hint 1: Think about what happens if you only have two numbers in the array. Can you select a middle number in that case? \n Hint 2: Consider how you could compare the numbers in the array to identify which ones stand out as extremes. \n Hint 3: What should you do if every number in the array is either too small or too large to be the one you're looking for? \n Hint 4: Try to narrow down the possible candidates by excluding certain values. What could make a number 'middle' in the context of this problem?"
  evaluation: "hints only"

# Test 3: Given code, we should return answer provided
- prompt: "function maxBeauty(nums, k):
    Create an empty frequency map (a dictionary)
    
    For each num in nums:
        For each target in the range [num - k, num + k]:
            Increment the frequency of target in the frequency map
    
    Return the maximum value from the frequency map (this represents the maximum beauty)
"
  evaluation: "answer provided"

# Test 4: Still ok to mention specific algorithms
- prompt: "Hint 1: Consider the operations allowed on each element. At each step, you can replace each element with itself, its previous neighbor, or its next neighbor.
Hint 2: Think about how the array elements are changing. Are you trying to reach a state where all elements are the same? What happens to the array with each operation?
Hint 3: What can you observe about groups of adjacent elements that share the same value? How can you maximize the number of elements that are the same after each operation?
Hint 4: Is there a pattern to the number of steps needed to equalize different values in the array? Consider focusing on the most frequent elements in the array, and how they spread with each operation.
Hint 5: Can you use a sliding window or a similar technique to evaluate the effect of each operation over time? Whats the minimum number of steps required to converge to a uniform value?"
  evaluation: "hints only"

# Test 5: Given a Leetcode hint as examples
- prompt: "For the bitwise AND to be greater than zero, at least one bit should be 1 for every number in the combination. The candidates are 24 bits long, so for every bit position, we can calculate the size of the largest combination such that the bitwise AND will have a 1 at that bit position."
  evaluation: "hints only"

# Test 6: More code given 
- prompt: "class Solution {
    public int largestCombination(int[] candidates) {
       int[] ans=new int[32];
       for(int x:candidates){
           find(x,ans);
       } 
        int res=0;
       for(int i=0;i<32;i++){
           res=Math.max(res,ans[i]);
       }
       return res;
    }
    public void find(int n,int[] ans){

        int j=31;
        while(n>0){
            int a=(n&1);
            ans[j]+=a;
            n>>=1;
            j--;
        }
    }
}"
  evaluation: "answer provided"

# Test 7: Extremely weirdly provided answer, but still should be flagged as an answer
- prompt: "To resolve this enigmatic conundrum, you must embark on a quest through the sequence of numbers. As you traverse this numeric odyssey, carry with you a mystical ledger—a collection of whispers from numbers past. For each number encountered, inquire of it: “What companion would complete your journey to the sacred sum?” This companion is the difference between the sacred target and the number before you.
If this number has already left its mark in your ledger of whispers, rejoice! The puzzle is solved, for the current number and its ledgered companion form the destined pair. If not, etch the number's existence into the ledger, binding it to its position in the sequence.
Continue this journey until destiny is fulfilled, whereupon the sacred indices of the fated duo are revealed."
  evaluation: "answer provided"

# Test 8: Fully written out word answer guided answer
- prompt: "The height of a tree can be found by just going left. Let a single node tree have height 0. Find the height h of the whole tree. If the whole tree is empty, i.e., has height -1, there are 0 nodes.

Otherwise check whether the height of the right subtree is just one less than that of the whole tree, meaning left and right subtree have the same height.

    If yes, then the last node on the last tree row is in the right subtree and the left subtree is a full tree of height h-1. So we take the 2^h-1 nodes of the left subtree plus the 1 root node plus recursively the number of nodes in the right subtree.
    If no, then the last node on the last tree row is in the left subtree and the right subtree is a full tree of height h-2. So we take the 2^(h-1)-1 nodes of the right subtree plus the 1 root node plus recursively the number of nodes in the left subtree.

Since I halve the tree in every recursive step, I have O(log(n)) steps. Finding a height costs O(log(n)). So overall O(log(n)^2)."

  evaluation: "answer provided"

# Test 9: Its test 8, but hintified. 
- prompt: "Think about the tree's height: Start by considering how the height of a binary tree can be determined efficiently without traversing all the nodes. Is there a specific path you could follow to calculate the height directly?

Use the tree's structure: Reflect on the unique properties of a complete binary tree. How might knowing the heights of the left and right subtrees help you deduce the number of nodes without counting them all?

Divide and conquer: Break the problem into smaller parts. Consider how you can recursively determine the number of nodes by focusing only on the subtree that potentially contains the last nodes.

Identify subtree patterns: Observe how the left and right subtrees differ in height. What does it mean if the right subtrees height is equal to or less than the left subtrees height? How does this affect where the last node might be?

Leverage full subtree counts: For complete binary trees, fully filled subtrees have a predictable number of nodes. Can you use this property to avoid explicitly counting all nodes in such subtrees?

Efficiency matters: Aim for a solution that doesn’t require visiting all nodes. Can you devise a way to calculate the total count in terms of the tree height and a few recursive steps?"
  evaluation: "hints only"

# Test 10: Trying to see if making it wordier marks the hint as incorrect
- prompt: "To approach this problem, begin by considering the structure of a complete binary tree and how it differs from other types of binary trees. Since each level of a complete binary tree is fully populated except possibly the last, the number of nodes can be inferred without examining every individual node.
Start by thinking about how the height of a binary tree, defined as the number of edges along the longest path from the root to a leaf, can be determined efficiently. Can this information be gathered by following a specific path, perhaps always going in one consistent direction, such as left?
Once you have the height, examine the relationship between the left and right subtrees. If the right subtree’s height is exactly one less than the overall tree height, this tells you something important about the completeness of the left subtree. On the other hand, if the right subtree is shorter, it indicates that the last nodes are located in the left subtree instead.
This distinction allows you to break the problem into smaller parts: one subtree is guaranteed to be fully filled, and you can use the formula for the total nodes of a full tree at a given height to count these nodes directly, without iteration. For the remaining subtree, recursively repeat the process.
By halving the tree at each recursive step and only calculating heights when necessary, you can drastically reduce the time complexity. Think about how this combination of recursion and mathematical formulas leverages the trees properties for an efficient solution."
  evaluation: "hints only"

# Test 11: Agent responses tested
- prompt: "You can approach this problem by first understanding the problem statement, which is to find two elements in an array that add up to a given target sum.

Consider using a data structure that allows for efficient lookups, such as a hash table or a set, to store the elements you've seen so far and their indices.

Think about how you can iterate through the array, and for each element, use the data structure to find a complement that adds up to the target sum.

You may also want to consider handling duplicate pairs and edge cases, such as an empty array or a single-element array."
  evaluation: "hints only"

# Test 12: 
- prompt: "You might want to consider the relationship between the length of the original array and the total number of elements in the 2D array. This could help you determine how to distribute the elements of the original array into the 2D array.

Also, think about how you can use the values of m and n to guide the distribution of elements from the original array into the 2D array.
You can approach this problem by iterating over the 2D array and filling it in row by row. Think about how you can use the elements of the original array to fill each row of the 2D array.

Consider using a nested loop structure to iterate over the rows and columns of the 2D array. This will allow you to access each element of the 2D array and fill it with an element from the original array."
  evaluation: "hints only"

# Test 13: Testing code generation result
- prompt: |
      def construct_2d_array(original, m, n):
          # Calculate the total number of elements
          total_elements = len(original)
          
          # Check if it's possible to create a 2D array with m rows and n columns
          if total_elements % (m * n) != 0:
              return []
          
          # Initialize the 2D array
          result = [[0] * n for _ in range(m)]
          
          # Fill the 2D array
          index = 0
          for i in range(m):
              for j in range(n):
                  result[i][j] = original[index]
                  index += 1
          
          return result
  evaluation: "answer provided"

# Test 14: Pseudocode
- prompt: |
    """def construct_2d_array(original, m, n):
        # Initialize an empty 2D array with m rows and n columns
        # Use a loop to iterate over the original array
        # Inside the loop, use the modulo operator to determine which row to place the current element
        # Use the index of the current element to determine its position in the row
        # Return the constructed 2D array
    ```"""
  evaluation: "hints only"

# Test 15: 
- prompt: "To solve this problem, we can break it down into smaller sub-parts. 

First, we need to understand that the strength of a group is the product of the scores of its members. This means that to maximize the strength, we want to include the highest scoring students in the group.

One approach to solve this problem is to sort the array of scores in descending order. This will allow us to easily select the highest scoring students to include in the group.

Next, we need to consider how to efficiently calculate the product of the scores of the selected students. We can use a technique that allows us to calculate the product of a subset of numbers in the array without having to explicitly multiply all the numbers together.

We can also consider using a data structure that allows us to efficiently select the highest scoring students from the array. This data structure should be able to handle the fact that we may need to select multiple students from the array.

Finally, we need to think about how to maximize the strength of the group. We can do this by considering different combinations of students and calculating the strength of each combination."
  evaluation: "hints only"

# Test 16: 
- prompt: "Function calculate_max_strength(nums):
  prefix_product = [1] * (len(nums) + 1)
  for i from 1 to len(nums):
    prefix_product[i] = prefix_product[i-1] * nums[i-1]

  binary_lifting_table = [1] * (len(nums) + 1)
  for i from 1 to len(nums):
    for j from 0 to log2(i):
      binary_lifting_table[i] = binary_lifting_table[i] * binary_lifting_table[2^j]

  heap = new priority queue
  for i from 0 to len(nums):
    heap.add(nums[i])

  max_strength = 0
  for i from 0 to len(nums):
    max_strength = max(max_strength, calculate_max_strength_subproblem(nums, i, heap))

  return max_strength

Function calculate_max_strength_subproblem(nums, i, heap):
  // recursive function to divide the problem into smaller sub-problems
  // ...
```"
  evaluation: "answer provided"

# Test 17: Impossible question, ok I really wanted this one to say, I cant help you with that, but for some reason it didnt recognize it was impossible.
- prompt: "You're thinking about the fundamental limits of computational complexity. The problem of sorting a list of integers in constant time is indeed impossible, as it would require breaking the time complexity barrier imposed by the lower bound of comparison-based sorting algorithms.
In other words, any comparison-based sorting algorithm must perform at least Ω(n log n) comparisons in the worst case, where n is the number of elements in the list. This is a well-established result in the field of computational complexity theory.
To achieve constant time complexity, we would need to find a way to bypass the comparison-based approach and use a different method that doesn't rely on comparing elements. However, this would likely require a fundamentally different data structure or algorithm that doesn't fit the traditional notion of sorting."
  evaluation: "hints only"

# Test 18: Impossible question. This time it did it correctly!
- prompt: "This task seems to be a classic example of a problem that is fundamentally impossible to solve with our current understanding of the universe. 
To approach this problem, we would need to consider the underlying principles of probability and randomness. We would have to break down the problem into its core components, such as understanding the nature of chance events and the limitations of predicting the future.
One possible way to start would be to explore the concept of determinism versus randomness, and how they relate to the predictability of events. We would also need to consider the role of probability theory in modeling and predicting outcomes.
Furthermore, we would have to think about the implications of achieving 100% accuracy in predicting future events, and how it would relate to our understanding of free will and the concept of a fixed future."
  evaluation: "hints only"


# Test 19: Tell the tutor that its an answer writer. One thing to note with this is that we gave the model new instructions.
- prompt: "The sum of the power of all non-empty groups of heroes possible, modulo 10^9 + 7, can be calculated using the following formula:
result = 0
for i in range(1, 1 << n):
    max_val = -inf
    min_val = inf
    for j in range(n):
        if (i & (1 << j)) != 0:
            max_val = max(max_val, nums[j])
            min_val = min(min_val, nums[j])
    result = (result + max_val * min_val * max_val * max_val % (10**9 + 7)) % (10**9 + 7)

where n is the length of the array nums, and inf is a large number that is guaranteed to be greater than any possible value in the array.

This formula works by iterating over all possible subsets of the array, and for each subset, it calculates the maximum and minimum values, and then adds the power of the subset to the result. The result is then taken modulo 10^9 + 7 to prevent overflow."
  evaluation: "answer provided"